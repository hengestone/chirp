commit 00dc1af5914600a8958f498f7b7f5d7a0d960dbc
Author: Jean-Louis Fuchs <ganwell@fangorn.ch>
Date:   Thu Feb 15 16:38:46 2018 +0100

    Introducing proc shuffler

diff --git a/src/func_test.py b/src/func_test.py
index 5a64ea0..6860afb 100644
--- a/src/func_test.py
+++ b/src/func_test.py
@@ -7,6 +7,7 @@ from hypothesis.strategies import (
 from hypothesis.stateful import (
     GenericStateMachine, run_state_machine_as_test
 )
+import threading
 import mpipe
 import socket
 from subprocess import Popen, TimeoutExpired, PIPE
@@ -21,6 +22,46 @@ func_send_message_e   = 3
 func_check_messages_e = 4
 func_shutdown_conns_e = 5
 
+shuffle_time = floats(min_value=0.001, max_value=0.02)
+
+
+class Shuffler(object):
+    """Shuffles execution of a proc."""
+
+    def __init__(self, capsys, proc : Popen, times):
+        self.capsys = capsys
+        self.proc = proc
+        self.times = times
+        self.running = True
+        self.thread = threading.Thread(target=self.run)
+        self.thread.start()
+
+    def run(self):
+        try:
+            for t in self.times:
+                if not self.running:
+                    return
+                self.proc.send_signal(signal.SIGSTOP)
+                with self.capsys.disabled():
+                    sys.stdout.write("|")
+                    sys.stdout.flush()
+                if self.running:
+                    time.sleep(t[0])
+                self.proc.send_signal(signal.SIGCONT)
+                with self.capsys.disabled():
+                    sys.stdout.write(">")
+                    sys.stdout.flush()
+                if self.running:
+                    time.sleep(t[1])
+        finally:
+            self.proc.send_signal(signal.SIGCONT)
+
+    def stop(self):
+        self.running = False
+
+    def join(self):
+        self.thread.join()
+
 
 def close(proc : Popen):
     """Close the subprocess."""
@@ -62,6 +103,8 @@ class GenFunc(GenericStateMachine):
                 sampled_from(('0', '1')),
                 sampled_from(('0', '1')),
                 sampled_from((True, True, True, False)),
+                lists(tuples(shuffle_time, shuffle_time)),
+                lists(tuples(shuffle_time, shuffle_time))
             )
         )
         self.init_echo_step = tuples(just("init_echo"), just(0))
@@ -144,6 +187,7 @@ class GenFunc(GenericStateMachine):
             check.close()
         # Make sure echo etest does not fail
         self.echo.poll()
+        self.echo_shuffler = Shuffler(self.capsys, self.echo, self.echo_times)
         assert self.echo.returncode is None
 
     def init_etest(self):
@@ -156,6 +200,7 @@ class GenFunc(GenericStateMachine):
             self.shutdown,
             self.acknowledge,
         ])
+        self.proc_shuffler = Shuffler(self.capsys, self.proc, self.proc_times)
         self.open_messages = set()
 
     def teardown(self):
@@ -165,6 +210,12 @@ class GenFunc(GenericStateMachine):
             ret = 1
             proc = self.proc
             echo = self.echo
+            self.proc_shuffler.stop()
+            if self.echo_ready:
+                self.echo_shuffler.stop()
+            self.proc_shuffler.join()
+            if self.echo_ready:
+                self.echo_shuffler.join()
             try:
                 try:
                     self.check_messages()
@@ -220,6 +271,8 @@ class GenFunc(GenericStateMachine):
             self.shutdown = str(value[1])
             self.acknowledge = str(value[2])
             self.fast = value[3]
+            self.proc_times = value[4]
+            self.echo_times = value[5]
             self.init_etest()
         elif action == 'init_echo':
             self.init_echo()
