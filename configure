#!/usr/bin/env python3

"""Configure the project for building.

Supports Linux, BSD, Mac, Windows and tries to be POSIX compliant (except on
Windows)
"""

import argparse
import collections
import codecs
import fnmatch
import os
import itertools
from os import path
import re
import sys
import shutil

_project = "libchirp"
_version_long = "0.2.0-beta"
_version = _version_long.split('-')[0]

_base = path.dirname(path.realpath(__file__))
_baselen = len(_base)
_include = re.compile('^\s*#\s*include\s*"\s*([^"]+\s*).*$')

_abi_template = """
<version>
    %s
</version>

<headers>
    %s
</headers>

<libs>
    %s
</libs>
"""


def write_abi_check():
    """Write an abi check definition."""
    file_ = path.join(_build, "abi-base.xml")
    with codecs.open(file_, 'w', "UTF-8") as f:
        f.write(_abi_template % (
            "0.0.0",
            path.join(_base, "include"),
            _build
        ))
    print("Created abi-base.xml")
    file_ = path.join(_build, "abi-cur.xml")
    with codecs.open(file_, 'w', "UTF-8") as f:
        f.write(_abi_template % (
            _version,
            path.join(_base, "include"),
            _build
        ))
    print("Created abi-cur.xml")


def match_files(base, pattern):
    """Match files in a base path."""
    for root, dirnames, filenames in os.walk(
            path.join(_base, base)
    ):
        for filename in fnmatch.filter(filenames, pattern):
            yield path.join(root, filename)


def parse_depends(file_, h_files):
    """Find all header depends in this file."""
    with codecs.open(file_, 'r', "UTF-8") as f:
        for line in f:
            match = _include.match(line)
            if match:
                header = match.group(1)
                base = path.dirname(
                    path.realpath(file_)
                )
                if _project in header:
                    depend = path.realpath(
                        path.join(_base, "include", header)
                    )
                else:
                    depend = path.realpath(
                        path.join(base, header)
                    )
                if depend in h_files:
                    yield depend


def flat_depends(file_, depends, flat):
    """Create a flat depends list of recursive dependencies."""
    dep = depends[file_]
    if file_  not in flat:
        flat.add(file_)
        if not dep:
            return flat
        for rec in dep:
            flat_depends(rec, depends, flat)
    return flat


def read_depends():
    """Read header dependencies into a dict to generate the makefile."""
    depends = collections.defaultdict(set)
    c_files = set()
    c_files.update(match_files("src", "*.c"))
    h_files = set()
    h_files.update(match_files("src", "*.h"))
    h_files.update(match_files("include", "*.h"))
    files = list(itertools.chain(c_files, h_files))
    for file_ in files:
        for depend in parse_depends(file_, h_files):
            if depend != "libchirp-config.h":
                depends[file_].add(depend)
    dependency_list = {file_: flat_depends(
        file_,
        depends,
        set()
    ) for file_ in c_files}
    return dependency_list, files, h_files, c_files


def replace_base(file_, repl):
    """Replace the base path."""
    if file_.startswith(_base):
        return "%s%s" % (repl, file_[_baselen:])
    else:
        return file_


def replace_base_base(file_):
    """Replace the base path with $(BASE)."""
    return replace_base(file_, "$(BASE)")


def replace_base_build(file_):
    """Replace the base path with $(BASE)."""
    return replace_base(file_, "$(BUILD)")


def parse():
    """Parse the argumentgs."""
    parser = argparse.ArgumentParser(
        description="Configure %s. Respects CC, CFLAGS , LDFLAGS and "
        "ARFLAGS environment variables. If you intend to build bindings, "
        "please use the same compiler that was used to build "
        "the host language (ie. python, node, php)." % _project
    )
    parser.add_argument(
        '--dev',
        action="store_true",
        help=(
            "Build for development. Enables debug build flags. "
            "Includes all development make targets."
        )
    )
    parser.add_argument(
        '--no-strip',
        action="store_true",
        help=(
            "Allow the distributions to strip binaries as they wish."
        )
    )
    parser.add_argument(
        '--verbose',
        action="store_true",
        help="Verbose build: display commands. Also: Env-Var VERBOSE=True."
    )
    parser.add_argument(
        '--doc',
        action="store_true",
        help="Generate documentation. Sphinx has to be installed."
    )
    parser.add_argument(
        '--prefix',
        help="Install prefix. Default: /usr/local"
    )

    return parser.parse_args()


def test_depends(args):
    """Test for dependencies."""
    failure = False
    sys.stdout.write("Checking for libuv: ")
    if os.system("make testlibuv"):
        print("""libuv was not found. For details see config.log.

Please install libuv:

Alpine:         apk add libuv-dev
Debian-based:   apt install libuv1-dev (may require backports)
Redhat-based:   yum install libuv-devel
Arch:           pacman -S libuv
OSX:            brew install libuv
""")
        failure = True
    else:
        print("ok")
    sys.stdout.write("Checking for openssl: ")
    if os.system("make testopenssl"):
        print("""openssl was not found. For details see config.log.

Please install openssl:

Alpine:         apk add libressl-dev
Debian-based:   apt install libssl-dev
Redhat-based:   yum install openssl-devel
Arch:           pacman -S openssl
OSX:            brew install libressl
""")
        failure = True
    else:
        print("ok")
    if failure:
        print(
            """\nIf a library is installed in a non-default path please use:

    -L in LDFLAGS

and

    -I in CFLAGS
""")
    if args.doc:
        sys.stdout.write("Checking for sphinx: ")
        try:
            import sphinx  # noqa
            print("ok")
        except ImportError:
            print("""sphinx was not found.

Please install sphinx:

Alpine:         apk add py3-sphinx py3-sphinx_rtd_theme graphviz
Debian-based:   apt install python3-sphinx python3-sphinx-rtd-theme graphviz
Redhat-based:   yum install python3-sphinx python3-sphinx-rtd-theme graphviz
Arch:           pacman -S python-sphinx python-sphinx_rtd_theme graphviz
OSX:            brew install sphinx-doc graphviz
""")
    if args.dev:
        sys.stdout.write("Checking for valgrind: ")
        if os.system("command -v valgrind > /dev/null"):
            print("""valgrind was not found.

Please install valgrind:

Alpine:         apk add valgrind
Debian-based:   apt install valgrind
Redhat-based:   yum install valgrind
Arch:           pacman -S valgrind
OSX:            brew install valgrind
""")
        else:
            print("ok")
        sys.stdout.write("Checking for cppcheck: ")
        if os.system("command -v cppcheck > /dev/null"):
            print("""cppcheck was not found.

Please install cppcheck:

Alpine:         apk add cppcheck
Debian-based:   apt install cppcheck
Redhat-based:   yum install cppcheck
Arch:           pacman -S cppcheck
OSX:            brew install cppcheck
""")
        else:
            print("ok")
        sys.stdout.write("Checking for abi-compliance-checker: ")
        if os.system("command -v abi-compliance-checker > /dev/null"):
            print("""abi-compliance-checker was not found.

Please install abi-compliance-checker:

Alpine:         apk add abi-compliance-checker
Debian-based:   apt install abi-compliance-checker
Redhat-based:   yum install abi-compliance-checker
Arch:           yaourt -S abi-compliance-checker
OSX:            brew install abi-compliance-checker
""")
        else:
            print("ok")
        sys.stdout.write("Checking for hypothesis: ")
        try:
            import hypothesis  # noqa
            print("ok")
        except ImportError:
            print("""hypothesis was not found.

Please install hypothesis:

Alpine:         apk add py3-hypothesis
Debian-based:   apt install python3-hypothesis
Redhat-based:   yum install python3-hypothesis
Arch:           pacman -S python-hypothesis
OSX:            brew install python3; pip3 install hypothesis
""")
        sys.stdout.write("Checking for pytest: ")
        try:
            import pytest  # noqa
            print("ok")
        except ImportError:
            print("""pytest was not found.

Please install pytest:

Alpine:         apk add py3-pytest
Debian-based:   apt install python3-pytest
Redhat-based:   yum install python3-pytest
Arch:           pacman -S python-pytest
OSX:            brew install python3; pip3 install pytest
""")
        sys.stdout.write("Checking for umsgpack (or msgpack): ")
        try:
            import umsgpack  # noqa
            print("ok")
        except ImportError:
            try:
                import msgpack  # noqa
                print("ok")
            except ImportError:
                print("""umsgpack was not found.

Please install umsgpack (or msgpack):

Alpine:         apk add py3-msgpack
Debian-based:   apt install python3-u-msgpack
Redhat-based:   yum install python3-msgpack
Arch:           pacman -S python-msgpack
OSX:            brew install python3; pip3 install python-msgpack
""")


def copy_files(args):
    """Copy to build directory."""
    shutil.copy(
        path.join(_base, "mk", "dh.pem"),
        path.join(_build, "dh.pem")
    )
    shutil.copy(
        path.join(_base, "mk", "cert.pem"),
        path.join(_build, "cert.pem")
    )


def write_config():
    """Write libchirp-config.h file with version."""
    with codecs.open(
            path.join(_base, "mk", "config.defs.h"),
            "r",
            "UTF-8"
    ) as infile:
        with codecs.open("libchirp-config.h", "w", "UTF-8") as outfile:
            for line in infile:
                if line.startswith('#define CH_VERSION "XVERSIONX"'):
                    outfile.write(
                        '#define CH_VERSION "%s"\n' % _version_long
                    )
                else:
                    outfile.write(line)
    print("Created libchirp-config.h. It contains sensible defaults.")


def write_makefile(args):
    """Parse arguments and write makefile accordingly."""
    prefix = "/usr/local"
    if args.prefix:
        prefix = args.prefix
    with codecs.open("Makefile", "w", "UTF-8") as f:
        f.write(
            ".PHONY: all libraries executables objects doc_files\n"
        )
        f.write("UNAME_S := $(shell uname -s)\n\n")
        f.write("all: libraries executables  ## Build everything\n\n")

        f.write("# Configuration\n")
        f.write("# =============\n")
        f.write("BASE := %s\n" % _base)
        f.write("BUILD := %s\n" % _build)
        f.write("PREFIX := %s\n" % prefix)
        f.write("PROJECT := %s\n" % _project)
        f.write("VERSION := %s\n" % _version)
        f.write("VERSION_LONG := %s\n" % _version_long)
        f.write("MAJOR := %s\n\n" % _version.split('.')[0])
        if args.verbose:
            f.write("VERBOSE := True\n")
        if not (args.dev or args.no_strip):
            f.write("STRIP := True\n")
        if args.doc:
            f.write("DOC := True\n")
        if args.dev:
            f.write("DEV := True\n")
        f.write("\n")
        depends, files, h_files, c_files = read_depends()
        depends = list(depends.items())
        fmt_str = (
            "LIBRARIES := $(BUILD)/{0}_test.a $(BUILD)/{0}.a "
            "$(BUILD)/{0}.so\n\n"
        )
        f.write("# File lists\n")
        f.write("# ==========\n")
        f.write(fmt_str.format(_project))
        f.write("libraries: $(LIBRARIES)  ## Make all libraries\n\n")
        f.write("EXECUTABLES := \\\n")
        executables = [
            (
                key, value
            ) for key, value in depends
            if key.endswith("_etest.c")
        ]
        for executable, _ in executables[:-1]:
            f.write("\t\t%s \\\n" % replace_base_build(executable[:-2]))
        f.write(
            "\t\t%s \n\n" % replace_base_build(executables[-1][0][:-2])
        )
        f.write("executables: $(EXECUTABLES)  ## Make all executables\n\n")
        f.write("OBJECTS := \\\n")
        for file_, _ in depends[:-1]:
            f.write("\t\t%s.o \\\n" % replace_base_build(
                path.splitext(file_)[0]
            ))
        f.write("\t\t%s.o \n\n" % replace_base_build(
            path.splitext(depends[-1][0])[0]
        ))
        f.write("objects: $(OBJECTS)  ## Make all objects\n\n")
        f.write("LIB_OBJECTS := \\\n")
        lib_objs = [
            file_ for file_, _ in depends
            if not file_.endswith("test.c")
        ]
        for file_ in lib_objs[:-1]:
            f.write("\t\t%s.o \\\n" % replace_base_build(
                path.splitext(file_)[0]
            ))
        f.write("\t\t%s.o \n\n" % replace_base_build(
            path.splitext(lib_objs[-1])[0]
        ))
        f.write("LIB_CFILES := \\\n")
        lib_objs = [
            file_ for file_, _ in depends
            if not file_.endswith("test.c")
        ]
        for file_ in lib_objs[:-1]:
            f.write("\t\t%s \\\n" % replace_base_base(file_))
        f.write("\t\t%s \n\n" % replace_base_base(lib_objs[-1]))

        f.write("TEST_OBJECTS := \\\n")
        test_objs = [
            file_ for file_, _ in depends
            if file_.endswith("_test.c")
        ]
        for file_ in test_objs[:-1]:
            f.write("\t\t%s.o \\\n" % replace_base_build(
                path.splitext(file_)[0]
            ))
        f.write("\t\t%s.o \n\n" % replace_base_build(
            path.splitext(test_objs[-1])[0]
        ))

        if args.doc:
            f.write("DOC_FILES := \\\n")
            for file_ in files[:-1]:
                f.write("\t\t%s.rst \\\n" % replace_base_build(file_))
            f.write("\t\t%s.rst \n\n" % replace_base_build(files[-1]))
            f.write("doc_files: $(DOC_FILES)  ## Make all rst-files\n\n")

        f.write("# Dependencies\n")
        f.write("# ============\n")
        for file_, dep in depends:
            if dep:
                dep = list(dep)
                bfile = "%s.o" % replace_base_build(
                    path.splitext(file_)[0]
                )
                f.write("%s: \\\n" % bfile)
                for depend in dep:
                    f.write("\t\t%s \\\n" % replace_base_base(depend))
                f.write("\t\t$(BUILD)/libchirp-config.h \\\n")
                if file_.endswith("_etest.c"):
                    f.write("\t\t$(BUILD)/libchirp.so \\\n")
                    f.write("\t\t$(BUILD)/libchirp_test.a \\\n")
                f.write("\t\t$(BUILD)/Makefile\n\n")
        f.write("# Includes\n")
        f.write("# ========\n")
        if args.dev:
            f.write("include $(BASE)/mk/dev.mk\n")
        else:
            f.write("include $(BASE)/mk/rel.mk\n")
        f.write("include $(BASE)/mk/base.mk\n")
        f.write("include $(BASE)/mk/rules.mk\n")
        f.write("# cf65e84fdbb7644a0c7725ebe6259490\n")
    try:
        os.unlink(path.join(_base, "libchirp-config.h"))
    except Exception:
        pass
    print("Created Makefile. It contains sensible defaults.")
    return c_files


def write_ide_files(args):
    """Write ide files like clang_complete."""
    if args.dev:
        sys.stdout.write("Creating .clang_complete: ")
        try:
            with codecs.open(path.join(_base, ".clang_complete"), "w") as f:
                f.write("-I%s\n-I%s\n-I%s\n-L%s\n" % (
                    path.join(_build, "src"),
                    path.join(_base, "src"),
                    path.join(_base, "include"),
                    _build
                ))
                f.write("-DCH_BUILD\n")
                print("ok")
        except Exception as e:
            print("failed", e)
        if _base != _build:
            sys.stdout.write("Creating Makefile for syntastic: ")
            try:
                shutil.copy(
                    path.join(_base, "mk", "vim.mk"),
                    path.join(_base, "Makefile"),
                )
                print("ok")
            except Exception as e:
                print("failed", e)


if __name__ == "__main__":
    in_source_attempt = os.path.dirname(__file__) == os.curdir
    if in_source_attempt:
        try:
            os.mkdir("build")
        except FileExistsError:
            pass
        os.chdir("build")
    _build = path.realpath(os.curdir)
    args = parse()
    c_files = write_makefile(args)
    write_config()
    write_abi_check()
    copy_files(args)
    write_ide_files(args)
    test_depends(args)
    print("\nTo build chirp call:\n")
    if in_source_attempt:
        print("cd build")
    print("make all")
